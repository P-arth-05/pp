import socket
import struct
import time
import sys
import os

# --- Constants ---
ICMP_ECHO_REQUEST = 8
MAX_HOPS = 30
TIMEOUT = 2.0 # seconds

def calculate_checksum(data):
    """
    Calculates the checksum for the given data.
    The checksum is the 16-bit one's complement of the one's complement sum
    of the 16-bit words in the data.
    """
    checksum = 0
    # Process data in 2-byte chunks
    for i in range(0, len(data), 2):
        word = (data[i] << 8) + data[i+1]
        checksum += word
    
    # Add the carry
    checksum = (checksum >> 16) + (checksum & 0xffff)
    # One's complement
    checksum = ~checksum & 0xffff
    
    return checksum

def create_packet(packet_id):
    """
    Creates a new ICMP echo request packet.
    """
    # Header is type (8), code (8), checksum (16), id (16), sequence (16)
    header = struct.pack("bbHHh", ICMP_ECHO_REQUEST, 0, 0, packet_id, 1)
    data = b'This is the traceroute data payload.'
    
    # Calculate checksum with a dummy checksum of 0
    my_checksum = calculate_checksum(header + data)
    
    # Repack the header with the correct checksum
    header = struct.pack("bbHHh", ICMP_ECHO_REQUEST, 0, socket.htons(my_checksum), packet_id, 1)
    
    return header + data

def run_traceroute(dest_name):
    """
    Executes the traceroute to the given destination.
    """
    try:
        dest_addr = socket.gethostbyname(dest_name)
    except socket.gaierror:
        print(f"Error: Cannot resolve hostname '{dest_name}'. Unknown host.")
        return

    print(f"Traceroute to {dest_name} ({dest_addr}), {MAX_HOPS} hops max.")
    print("-" * 50)

    # Get a unique packet ID using the process ID
    packet_id = os.getpid() & 0xFFFF

    for ttl in range(1, MAX_HOPS + 1):
        try:
            # --- Create Sockets ---
            # Receiver socket to listen for ICMP replies
            recv_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
            recv_socket.settimeout(TIMEOUT)

            # Sender socket to send ICMP echo requests
            send_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_ICMP)
            send_socket.setsockopt(socket.IPPROTO_IP, socket.IP_TTL, ttl)

        except socket.error as e:
            print(f"Socket error: {e}")
            print("This script requires root/administrator privileges to run.")
            sys.exit(1)

        try:
            # Send the packet
            packet = create_packet(packet_id)
            send_socket.sendto(packet, (dest_addr, 0))
            t_start = time.time()

            # Wait for a reply
            data, curr_addr = recv_socket.recvfrom(512)
            t_end = time.time()
            
            curr_addr = curr_addr[0] # The address is in a tuple
            time_ms = round((t_end - t_start) * 1000, 2)
            
            # (B) Try to get the hostname
            try:
                curr_name = socket.gethostbyaddr(curr_addr)[0]
            except socket.herror:
                curr_name = curr_addr # Use IP if hostname lookup fails

            # (A) Print the IP address and hostname
            print(f"{ttl:<3} {time_ms:>6} ms   {curr_name} [{curr_addr}]")

            # Check if we've reached the destination
            if curr_addr == dest_addr:
                print("\nTraceroute complete.")
                break

        except socket.timeout:
            print(f"{ttl:<3}    * Request timed out.")
        
        finally:
            recv_socket.close()
            send_socket.close()

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python traceroute.py <hostname_or_ip>")
        print("Example: python traceroute.py google.com")
        sys.exit(1)
        
    destination = sys.argv[1]
    run_traceroute(destination)
